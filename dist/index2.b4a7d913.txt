class ReactDOM {
  static render(vnode, container) {
    console.log(vnode)
    // vnode为空、为undefined、为boolean
    if (vnode === null 
      || vnode === undefined 
      || typeof vnode === 'boolean') 
      return
    // vnode为字符串
    if (typeof vnode === 'string') {
      container.innerHTML = vnode
    }
    // vnode为object
      // 创建一个元素
      // 遍历加上属性
      // append到container上
    if (typeof vnode === 'object') {
      const {tag, attrs} = vnode
      let dom = document.createElement(tag)
      Object.keys(attrs).map(key => {
        this.setAttribute(dom, key, attrs[key])
      })

      vnode.children && vnode.children.forEach(child => this.render(child, dom))

      return container.append(dom)
    }
  }
  static setAttribute (dom, key, value) {
    // className => class
    if (key === 'className') {
      key = 'class'
    } else if (/on\w+/.test(key)) {
      // onCLick => click
      key = key.toLowerCase()
      dom[key] = value || ''
    } else if (key === 'style') {
      // style
      // style="color: 'red'"
      // style={{color: 'red'}}
      if (!value && typeof value ==='string') {
        dom.style.cssText = value
      } else if (typeof value === 'object') {
        for(let key in value) {
          if(typeof value[key] === 'number') {
            dom.style[key] =  value[key] + 'px'
          } else {
            dom.style[key] =  value[key]
          }
        }
      }
    } else {
      // 其他的dom[key] = value， 更新
      if (key in dom) {
        dom[key] = value || ''
      }

      if(value) {
        dom.setAttribute(key, value)
      } else {
        dom.removeAttribute(key)
      }
    }
  }
}

export default ReactDOM